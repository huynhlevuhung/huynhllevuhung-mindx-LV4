// controllers/authController.js
import User from "../models/UserModel.js";
import catchAsync from "../utils/catchAsync.js";
import AppError from "../utils/appError.js";
import sendEmail from "../utils/mail.js";
import crypto from "crypto";
import TempUser from "../models/TempUserModel.js";
import { signToken } from "../utils/jwt.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

// ----------------- Helper -----------------
const createSendToken = (user, message, statusCode, res) => {
  const token = signToken(user._id);

  res.cookie("jwt", token, {
    httpOnly: true,
    secure: false,
    sameSite: "Lax",
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 ng√†y
  });

  res.status(statusCode).json({
    status: "success",
    message,
    data: {
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
      },
    },
  });
};

// ----------------- Signup / OTP -----------------
const signup = catchAsync(async (req, res, next) => {
  const { username, email, password, passwordConfirm } = req.body;

  const existingUser = await User.findOne({
    $or: [{ username }, { email }],
  });
  if (existingUser) {
    return next(new AppError("Username ho·∫∑c Email ƒë√£ t·ªìn t·∫°i", 400));
  }

  const otp = crypto.randomInt(100000, 999999).toString();

  await TempUser.create({
    username,
    email,
    password,
    passwordConfirm,
    otp,
    otpExpires: new Date(Date.now() + 5 * 60 * 1000),   // 5 ph√∫t
  });

  await sendEmail({
    email,
    subject: "M√£ OTP x√°c th·ª±c",
    message: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.`,
  });

  res.status(201).json({
    status: "success",
    message: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP.",
  });
});

const verifyOtp = catchAsync(async (req, res, next) => {
  const { email, otp } = req.body;

  const tempUser = await TempUser.findOne({
    email,
    otp,
    otpExpires: { $gt: Date.now() },
  }).select("+password");

  if (!tempUser)
    return next(new AppError("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n", 400));

  // ‚úÖ C√°ch s·ª≠a: b·ªè qua hash l·∫ßn 2
  const user = new User({
    username: tempUser.username,
    email: tempUser.email,
    password: tempUser.password, // ƒë√£ hash ·ªü TempUser
  });
  user.skipHash = true; // üëâ ƒë·ªÉ middleware UserModel kh√¥ng hash l·∫°i
  await user.save();

  await TempUser.deleteOne({ _id: tempUser._id });

  createSendToken(user, "ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng", 200, res);
});

const resendOtp = catchAsync(async (req, res, next) => {
  const { email } = req.body;

  const tempUser = await TempUser.findOne({ email });
  if (!tempUser) {
    return next(new AppError("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ƒëƒÉng k√Ω v·ªõi email n√†y", 404));
  }

  const otp = crypto.randomInt(100000, 999999).toString();
  tempUser.otp = otp;
  tempUser.otpExpires = Date.now() + 5 * 60 * 1000;
  await tempUser.save({ validateBeforeSave: false });

  await sendEmail({
    email,
    subject: "M√£ OTP x√°c th·ª±c m·ªõi",
    message: `M√£ OTP m·ªõi c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.`,
  });

  res.status(200).json({
    status: "success",
    message: "OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.",
  });
});

// ----------------- Login -----------------
const login = catchAsync(async (req, res, next) => {
  const { identifier, password } = req.body;

  if (!identifier || !password) {
    return next(new AppError("Vui l√≤ng nh·∫≠p email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u", 400));
  }

  const user = await User.findOne({
    $or: [{ username: identifier }, { email: identifier }],
  }).select("+password");

  if (!user) {
    return next(new AppError("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng", 401));
  }

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return next(new AppError("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng", 401));
  }

  createSendToken(user, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", 200, res);
});

// ----------------- Qu√™n m·∫≠t kh·∫©u / Reset -----------------
const forgotPassword = catchAsync(async (req, res, next) => {
  const { email } = req.body;
  const user = await User.findOne({ email });
  if (!user) {
    return next(new AppError("Email kh√¥ng t·ªìn t·∫°i", 404));
  }

  const otp = crypto.randomInt(100000, 999999).toString();
  user.otpReset = {
    code: otp,
    expiresAt: Date.now() + 5 * 60 * 1000,
    attemptCount: 0,
  };
  await user.save({ validateBeforeSave: false });

  await sendEmail({
    email,
    subject: "M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u",
    message: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.`,
  });

  res.status(200).json({ message: "OTP ƒë√£ g·ª≠i t·ªõi email c·ªßa b·∫°n" });
});

const verifyForgotPassword = catchAsync(async (req, res, next) => {
  const { email, otp } = req.body;
  const user = await User.findOne({ email });

  if (!user || !user.otpReset) {
    return next(new AppError("User kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a y√™u c·∫ßu OTP", 404));
  }

  if (user.otpReset.expiresAt < Date.now()) {
    return next(new AppError("OTP ƒë√£ h·∫øt h·∫°n", 400));
  }

  if (user.otpReset.code !== otp) {
    return next(new AppError("OTP kh√¥ng ƒë√∫ng", 400));
  }

  const resetToken = signToken(user.email);

  res.cookie("resetToken", resetToken, {
    httpOnly: true,
    secure: false,
    sameSite: "Lax",
    maxAge: 10 * 60 * 1000,
  });

  res.status(200).json({ message: "OTP h·ª£p l·ªá, cho ph√©p reset m·∫≠t kh·∫©u" });
});

const verifyResetTokenCookie = catchAsync(async (req, res, next) => {
  const token = req.cookies.resetToken;
  if (!token) return next(new AppError("Kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u", 401));

  const decoded = jwt.verify(token, process.env.JWT_SECRET);
  req.email = decoded.id;
  next();
});

const resetPassword = catchAsync(async (req, res, next) => {
  const { newPassword } = req.body;
  const { email } = req;

  const user = await User.findOne({ email });
  if (!user) return next(new AppError("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i", 404));

  user.password = newPassword;
  await user.save();

  res.clearCookie("resetToken");
  res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
});

// ----------------- Middleware -----------------
const protect = catchAsync(async (req, res, next) => {
  let token;

  if (req.cookies && req.cookies.jwt) {
    token = req.cookies.jwt;
  } else if (
    req.headers.authorization &&
    req.headers.authorization.startsWith("Bearer")
  ) {
    token = req.headers.authorization.split(" ")[1];
  }

  if (!token) {
    return next(new AppError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i", 401));
  }

  const decoded = jwt.verify(token, process.env.JWT_SECRET);
  const currentUser = await User.findById(decoded.id);
  if (!currentUser) {
    return next(new AppError("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i", 401));
  }

  req.user = currentUser;
  next();
});

// ----------------- GET ME -----------------
const getMe = catchAsync(async (req, res, next) => {
  const user = await User.findById(req.user.id).select("-password");
  if (!user) {
    return next(new AppError("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng", 404));
  }
  res.status(200).json({ status: "success", data: { user } });
});

const resendOtpForgotPassword = catchAsync(async (req, res, next) => {
  const { email } = req.body;
  const user = await User.findOne({ email });

  if (!user || !user.otpReset) {
    return next(new AppError("Kh√¥ng t√¨m th·∫•y user ho·∫∑c ch∆∞a y√™u c·∫ßu OTP", 404));
  }

  // T·∫°o OTP m·ªõi
  const otp = crypto.randomInt(100000, 999999).toString();
  user.otpReset = {
    code: otp,
    expiresAt: Date.now() + 5 * 60 * 1000,
    attemptCount: 0,
  };
  await user.save({ validateBeforeSave: false });

  await sendEmail({
    email,
    subject: "M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u (OTP m·ªõi)",
    message: `M√£ OTP m·ªõi c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.`,
  });

  res.status(200).json({
    status: "success",
    message: "OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n",
  });
});

const restrictTo = (...roles) => {
  return (req, res, next) => {
    if (!req.user || !roles.includes(req.user.role)) {
      return next(
        new AppError("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y", 403)
      );
    }
    next();
  };
};
// ----------------- Export -----------------
const authController = {
  signup,
  verifyOtp,
  resendOtp,
  login,
  forgotPassword,
  resendOtpForgotPassword,
  verifyForgotPassword,
  verifyResetTokenCookie,
  resetPassword,
  protect,
  restrictTo,
  getMe,
};

export default authController;
